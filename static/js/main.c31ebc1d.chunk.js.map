{"version":3,"sources":["components/use-input.js","components/SimpleInput.js","App.js","index.js"],"names":["intialData","value","isTouched","inputReducer","state","action","type","useInput","validateValue","useReducer","stateReduce","dispatch","valueIsValid","hasError","isValid","valueChangeHandler","e","target","inputBlurHandler","event","reset","SimpleInput","props","trim","enteredName","enteredNameIsValid","nameInputHasError","nameChangeHandler","nameBlurHandler","includes","enteredEmail","enteredEmailIsValid","emailInputHasError","emailBlurHandler","emailChangeHandler","resetEmailInput","formIsValid","nameInputClasses","emailInputClasses","onSubmit","preventDefault","className","htmlFor","id","onChange","onBlur","disabled","App","ReactDOM","render","document","getElementById"],"mappings":"mLACMA,EAAa,CACjBC,MAAO,GACPC,WAAW,GAEPC,EAAe,SAACC,EAAOC,GAC3B,MAAmB,SAAfA,EAAOC,KACF,CAAEL,MAAOI,EAAOJ,MAAOC,UAAWE,EAAMF,WAE9B,QAAfG,EAAOC,KACF,CAAEJ,WAAW,EAAMD,MAAOG,EAAMH,OAEtB,SAAfI,EAAOC,KACF,CAAEJ,WAAW,EAAOD,MAAO,IAG7BD,GA2BMO,EAzBE,SAACC,GAChB,MAAgCC,qBAAWN,EAAcH,GAAzD,mBAAOU,EAAP,KAAoBC,EAApB,KAEMC,EAAeJ,EAAcE,EAAYT,OACzCY,GAAYD,GAAgBF,EAAYR,UAY9C,MAAO,CACLD,MAAOS,EAAYT,MACnBY,WACAC,QAASF,EACTG,mBAdyB,SAACC,GAC1BL,EAAS,CAAEL,KAAM,QAASL,MAAOe,EAAEC,OAAOhB,SAc1CiB,iBAXuB,SAACC,GACxBR,EAAS,CAAEL,KAAM,UAWjBc,MATY,WACZT,EAAS,CAAEL,KAAM,a,OCgDNe,EA7EK,SAACC,GACnB,MAOIf,GAAS,SAACN,GAAD,MAA4B,KAAjBA,EAAMsB,UANrBC,EADT,EACEvB,MACSwB,EAFX,EAEEX,QACUY,EAHZ,EAGEb,SACoBc,EAJtB,EAIEZ,mBACkBa,EALpB,EAKEV,iBACAE,EANF,EAMEA,MAGF,EAOIb,GAAS,SAACN,GAAD,OAAWA,EAAM4B,SAAS,QAN9BC,EADT,EACE7B,MACS8B,EAFX,EAEEjB,QACUkB,EAHZ,EAGEnB,SACkBoB,EAJpB,EAIEf,iBACoBgB,EALtB,EAKEnB,mBACOoB,EANT,EAMEf,MAGEgB,GAAc,EACdX,GAAsBM,IACxBK,GAAc,GAGhB,IAWMC,EAAmBX,EACrB,uBACA,gBACEY,EAAoBN,EACtB,uBACA,gBAEJ,OACE,uBAAMO,SAnBsB,SAACpB,GAC7BA,EAAMqB,iBAEDf,IAILL,IACAe,MAWA,UACE,sBAAKM,UAAWJ,EAAhB,UACE,uBAAOK,QAAQ,OAAf,uBACA,uBACEpC,KAAK,OACLqC,GAAG,OACHC,SAAUjB,EACV1B,MAAOuB,EACPqB,OAAQjB,IAETF,GACC,mBAAGe,UAAU,aAAb,wCAGJ,sBAAKA,UAAWH,EAAhB,UACE,uBAAOI,QAAQ,QAAf,wBACA,uBACEpC,KAAK,OACLqC,GAAG,QACHC,SAAUV,EACVjC,MAAO6B,EACPe,OAAQZ,IAETD,GACC,mBAAGS,UAAU,aAAb,4CAGJ,qBAAKA,UAAU,eAAf,SACE,wBAAQK,UAAWV,EAAnB,0BChEOW,MARf,WACE,OACE,qBAAKN,UAAU,MAAf,SACE,cAAC,EAAD,OCANO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.c31ebc1d.chunk.js","sourcesContent":["import { useReducer } from \"react\";\r\nconst intialData = {\r\n  value: \"\",\r\n  isTouched: false,\r\n};\r\nconst inputReducer = (state, action) => {\r\n  if (action.type == \"input\") {\r\n    return { value: action.value, isTouched: state.isTouched };\r\n  }\r\n  if (action.type == \"blur\") {\r\n    return { isTouched: true, value: state.value };\r\n  }\r\n  if (action.type == \"reset\") {\r\n    return { isTouched: false, value: \"\" };\r\n  }\r\n\r\n  return intialData;\r\n};\r\nconst useInput = (validateValue) => {\r\n  const [stateReduce, dispatch] = useReducer(inputReducer, intialData);\r\n\r\n  const valueIsValid = validateValue(stateReduce.value);\r\n  const hasError = !valueIsValid && stateReduce.isTouched;\r\n\r\n  const valueChangeHandler = (e) => {\r\n    dispatch({ type: \"input\", value: e.target.value });\r\n  };\r\n\r\n  const inputBlurHandler = (event) => {\r\n    dispatch({ type: \"blur\" });\r\n  };\r\n  const reset = () => {\r\n    dispatch({ type: \"reset\" });\r\n  };\r\n  return {\r\n    value: stateReduce.value,\r\n    hasError,\r\n    isValid: valueIsValid,\r\n    valueChangeHandler,\r\n    inputBlurHandler,\r\n    reset,\r\n  };\r\n};\r\nexport default useInput;\r\n","import { useState, useEffect } from \"react\";\nimport useInput from \"./use-input\";\n\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    inputBlurHandler: emailBlurHandler,\n    valueChangeHandler: emailChangeHandler,\n    reset: resetEmailInput,\n  } = useInput((value) => value.includes(\"@\"));\n\n  let formIsValid = false;\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    reset();\n    resetEmailInput();\n  };\n\n  const nameInputClasses = nameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control \";\n  const emailInputClasses = emailInputHasError\n    ? \"form-control invalid\"\n    : \"form-control \";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameChangeHandler}\n          value={enteredName}\n          onBlur={nameBlurHandler}\n        />\n        {nameInputHasError && (\n          <p className=\"error-text\">name must not be empty </p>\n        )}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor=\"email\">Your email</label>\n        <input\n          type=\"text\"\n          id=\"email\"\n          onChange={emailChangeHandler}\n          value={enteredEmail}\n          onBlur={emailBlurHandler}\n        />\n        {emailInputHasError && (\n          <p className=\"error-text\">Email should be contains @ </p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n","import SimpleInput from './components/SimpleInput';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <SimpleInput />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}